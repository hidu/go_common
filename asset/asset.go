// Generated by goasset(1.0 20200404) or "go generate" . DO NOT EDIT.
// https://github.com/hidu/goasset/

package asset

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"mime"
	"net/http"
	"os"
	"path"
	"path/filepath"
	"regexp"
	"runtime"
	"strings"
	"time"
)

// AssetFile one asset file
type AssetFile interface {
	Name() string
	ModTime() time.Time
	Content() []byte
	ContentGzip() []byte
}

// assetFile asset file  struct
type assetFile struct {
	name        string
	mtime       time.Time
	content     []byte
	contentGzip []byte
}

func (af *assetFile) Name() string {
	return af.name
}
func (af *assetFile) ModTime() time.Time {
	return af.mtime
}

func (af *assetFile) Content() []byte {
	return af.content
}
func (af *assetFile) ContentGzip() []byte {
	return af.contentGzip
}

var _ AssetFile = &assetFile{}

// AssetFiles asset files
type AssetFiles interface {
	GetAssetFile(name string) (AssetFile, error)
	GetContent(name string) []byte
	GetFileNames(dir string) []string

	FileHandlerFunc(name string) http.HandlerFunc
	HTTPHandler(baseDir string) http.Handler
}

// assetFiles asset files
type assetFiles struct {
	Files map[string]*assetFile
}

var _assetDirect bool

var _assetCwd, _ = os.Getwd()

// GetAssetFile get file by name
func (afs *assetFiles) GetAssetFile(name string) (AssetFile, error) {
	name = filepath.ToSlash(name)
	if name != "" && name[0] != '/' {
		name = "/" + name
	}
	if _assetDirect {
		assetFilePath := filepath.Join(_assetCwd, name)
		f, err := os.Open(assetFilePath)
		log.Println("[goasset] Asset Direct, name=", name, "assetPath=", assetFilePath, "err=", err)

		if err != nil {
			return nil, err
		}
		defer f.Close()
		info, err := f.Stat()
		if err != nil {
			return nil, err
		}
		if info.Mode().IsRegular() {
			content, err := ioutil.ReadAll(f)
			if err != nil {
				return nil, err
			}

			helper := newAssetHelper()
			contentNew, errHelper := helper.Execute(assetFilePath, content, "")
			if errHelper != nil {
				return nil, errHelper
			}
			return &assetFile{
				content: contentNew,
				name:    name,
				mtime:   info.ModTime(),
			}, nil
		}
		return nil, fmt.Errorf("not file")
	}
	if sf, has := afs.Files[name]; has {
		return sf, nil
	}
	return nil, fmt.Errorf("not exists")
}

// GetContent get content by name
func (afs *assetFiles) GetContent(name string) []byte {
	s, err := afs.GetAssetFile(name)
	if err != nil {
		return []byte("")
	}
	return s.Content()
}

// GetFileNames get all file names
func (afs *assetFiles) GetFileNames(dir string) []string {
	if dir == "" {
		dir = "/"
	}
	names := make([]string, 0, len(afs.Files))
	dirRaw := dir
	dir = path.Clean(dir)

	if dir != "/" && strings.HasSuffix(dirRaw, "/") {
		dir += string(filepath.Separator)
	}

	dir = filepath.ToSlash(dir)

	for name := range afs.Files {
		if strings.HasPrefix(name, dir) {
			names = append(names, name)
		}
	}
	return names
}

// FileHandlerFunc handler http files
// 若目录名称 为 *private 则不允许通过web访问
func (afs *assetFiles) FileHandlerFunc(name string) http.HandlerFunc {
	if strings.Contains(name, "private/") {
		return http.NotFound
	}
	return afs.FileHandlerFuncAll(name)
}

// FileHandlerFuncAll handler http files
// 无 private 目录规则
func (afs *assetFiles) FileHandlerFuncAll(name string) http.HandlerFunc {
	name = filepath.ToSlash(name)
	file, err := afs.GetAssetFile(name)
	return func(writer http.ResponseWriter, req *http.Request) {
		if err != nil {
			http.NotFound(writer, req)
			return
		}
		modifiedSince := req.Header.Get("If-Modified-Since")
		if modifiedSince != "" {
			t, err := time.Parse(http.TimeFormat, modifiedSince)
			if err == nil && file.ModTime().Before(t) {
				writer.Header().Del("Content-Type")
				writer.Header().Del("Content-Length")
				writer.Header().Set("Last-Modified", file.ModTime().UTC().Format(http.TimeFormat))
				writer.WriteHeader(http.StatusNotModified)
				return
			}
		}

		mimeType := mime.TypeByExtension(filepath.Ext(file.Name()))
		if mimeType != "" {
			writer.Header().Set("Content-Type", mimeType)
		}
		writer.Header().Set("Last-Modified", file.ModTime().UTC().Format(http.TimeFormat))

		gzipContent := file.ContentGzip()
		var errWrote error
		if len(gzipContent) > 0 && strings.Contains(req.Header.Get("Accept-Encoding"), "gzip") {
			writer.Header().Set("Content-Encoding", "gzip")
			_, errWrote = writer.Write(gzipContent)
		} else {
			_, errWrote = writer.Write(file.Content())
		}

		if errWrote != nil {
			log.Printf("[wf] wrote %q with error:%s\n", name, errWrote)
		}
	}
}

// HTTPHandler handler http request
// eg:on file system is :/res/js/a.js and request is /res/js/a.js
// http.Handle("/res/",res.Asset.HttpHandler("/"))

// eg:on file system is :/res/js/a.js and request is /js/a.js
// http.Handle("/js/",res.Asset.HttpHandler("/res/"))
func (afs *assetFiles) HTTPHandler(baseDir string) http.Handler {
	return &_assetFileServer{sf: afs, pdir: baseDir}
}

type _assetFileServer struct {
	sf   *assetFiles
	pdir string
}

// ServeHTTP ServeHTTP
func (f *_assetFileServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	name := filepath.ToSlash(filepath.Join(f.pdir, r.URL.Path))
	f.sf.FileHandlerFunc(name).ServeHTTP(w, r)
}

var _ AssetFiles = &assetFiles{}

var _ = flag.String
var _ = runtime.Version()

// ---------------------------helper.go--------begin--------------------------//

func newAssetHelper() *assetHelper {
	helper := &assetHelper{}

	helper.Regs = make(map[string]*regexp.Regexp)
	helper.Regs["remove_above"] = regexp.MustCompile(`[\S\s]*?//\s*asset_remove_above\(\s*\)`)
	helper.Regs["remove"] = regexp.MustCompile(`//\s*asset_remove_start\(\s*\)[\S\s]*?//\s*asset_remove_end\(\s*\)`)
	helper.Regs["include"] = regexp.MustCompile(`//\s*asset_include\(([^)]+?)\)`)

	helper.RegisterFn("remove_above", helper.RemoveAbove)
	helper.RegisterFn("include", helper.Include)
	helper.RegisterFn("remove", helper.Remove)

	return helper
}

type assetHelperFn func(fileName string, content []byte) ([]byte, error)

type assetHelper struct {
	Fns  []map[string]assetHelperFn
	Regs map[string]*regexp.Regexp
}

// RegisterFn 注册helper方法
func (h *assetHelper) RegisterFn(name string, fn assetHelperFn) {
	h.Fns = append(h.Fns, map[string]assetHelperFn{name: fn})
}

// Execute 执行所有的helper方法
func (h *assetHelper) Execute(fileAbsPath string, content []byte, skipFnName string) (contentNew []byte, err error) {
	contentNew = make([]byte, len(content))
	copy(contentNew, content)

	for _, fnInfo := range h.Fns {
		for name, fn := range fnInfo {
			if name == skipFnName {
				continue
			}
			contentNew, err = fn(fileAbsPath, contentNew)
			if err != nil {
				return nil, fmt.Errorf("%s,current file is: %s", err.Error(), fileAbsPath)
			}
		}
	}

	return contentNew, nil
}

// RemoveAbove 删除在此标记之前的内容
// eg: \/\/ asset_remove_above()
func (h *assetHelper) RemoveAbove(fileAbsPath string, content []byte) (contentNew []byte, err error) {
	contentNew = h.Regs["remove_above"].ReplaceAll(content, []byte(""))
	return contentNew, nil
}

// Remove remove 方法, 删除指定区间里的内容
// eg: \/\/asset_remove_start() 中间的内容被删除 \/\/ asset_remove_end()
func (h *assetHelper) Remove(fileAbsPath string, content []byte) (contentNew []byte, err error) {
	contentNew = h.Regs["remove"].ReplaceAll(content, []byte(""))
	return contentNew, nil
}

func (h *assetHelper) include(fileAPath string, content []byte, includeFiles map[string]map[string]bool) (contentNew []byte, err error) {

	fileAPath = filepath.Clean(fileAPath)
	includeFiles[fileAPath] = make(map[string]bool)

	contentNew = h.Regs["include"].ReplaceAllFunc(content, func(matchData []byte) []byte {
		idx := bytes.Index(matchData, []byte("("))
		name := bytes.TrimSpace(matchData[idx+1 : len(matchData)-1])
		if len(name) == 0 {
			err = fmt.Errorf("asset_include with empty param")
			return []byte(err.Error())
		}
		fileBPath := filepath.Join(filepath.Dir(fileAPath), string(name))

		if bFiles, hasB := includeFiles[fileBPath]; hasB {
			if _, hasA := bFiles[fileAPath]; hasA {
				err = fmt.Errorf("asset_include error: cyclic include,%s include(%s)", fileAPath, string(name))
				return []byte(err.Error())
			}
		}
		includeFiles[fileAPath][fileBPath] = true

		includeFiles[fileBPath] = make(map[string]bool)

		bContent, errRead := ioutil.ReadFile(fileBPath)
		if errRead != nil {
			err = errRead
			return []byte(err.Error())
		}

		b1Content, errB1 := h.Execute(fileBPath, bContent, "include")
		if errB1 != nil {
			err = errB1
			return []byte(err.Error())
		}

		cContent, errInclude := h.include(fileBPath, b1Content, includeFiles)
		if errInclude != nil {
			err = errInclude
			return []byte(err.Error())
		}
		return cContent
	})

	if err != nil {
		return nil, err
	}
	return contentNew, nil
}

// Include 将另外一个资源文件包含到当前文件里
// eg: \/\/ asset_include(a.tpl)
func (h *assetHelper) Include(fileAPath string, content []byte) (contentNew []byte, err error) {
	// 用于检查循环include
	includeFiles := make(map[string]map[string]bool)
	return h.include(fileAPath, content, includeFiles)
}

// ---------------------------helper.go--------finish-------------------------//

// Asset export assets
var Asset AssetFiles

func init() {

	// nolint
	var _assetGzipDecode = func(data []byte, fileName string) []byte {
		gzipReader, errGzip := gzip.NewReader(bytes.NewBuffer(data))
		if errGzip != nil {
			panic(fmt.Sprintf("[goasset] gzip decode failed,file=%q, err=%s", fileName, errGzip.Error()))
		}
		defer gzipReader.Close()
		buf, errReader := ioutil.ReadAll(gzipReader)
		if errReader != nil {
			panic(fmt.Sprintf("[goasset] read decode content failed, file=%q err=%s", fileName, errReader.Error()))
		}
		return buf
	}

	// nolint
	var _assetBase64Decode = func(txt string, fileName string) []byte {
		txt = strings.ReplaceAll(txt, "\n", "")
		bf, err := base64.StdEncoding.DecodeString(txt)
		if err != nil {
			panic(fmt.Sprintf("[goasset](%s) base64 decode failed, err=%s", fileName, err.Error()))
		}
		return bf
	}

	asset := &assetFiles{Files: map[string]*assetFile{}}
	Asset = asset

	{
		// 0 mtime: 2015-08-24 18:21:52 , size: 84345
		fileName := "/res/js/jquery.min.js"
		contentBase64 := `
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`

		contentGz := _assetBase64Decode(contentBase64, fileName)
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1440411712, 0),
			content:     _assetGzipDecode(contentGz, fileName),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

}
